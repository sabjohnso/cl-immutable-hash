(in-package :hash-map)

(deftype hash-map ()
  'immutable-hash-map)
(define-symbol-macro empty-hash-map empty-immutable-hash-map)
(setf (symbol-function 'hash-map) #'immutable-hash-map)
(setf (symbol-function 'alist-to-hash-map) #'alist-to-immutable-hash-map)
(setf (symbol-function 'hash-map-p) #'immutable-hash-map-p)
(setf (symbol-function 'empty-p) #'immutable-hash-map-empty-p)
(setf (symbol-function 'count) #'immutable-hash-map-count)
(setf (symbol-function 'has-key) #'immutable-hash-map-has-key)
(setf (symbol-function 'ref) #'immutable-hash-map-ref)
(setf (symbol-function 'keys) #'immutable-hash-map-keys)
(setf (symbol-function 'vals) #'immutable-hash-map-values)
(setf (symbol-function 'items) #'immutable-hash-map-items)
(setf (symbol-function 'keys) #'immutable-hash-map-keys-seq)
(setf (symbol-function 'in-values) #'immutable-hash-map-values-seq)
(setf (symbol-function 'in-items) #'immutable-hash-map-items-seq)
(setf (symbol-function 'add) #'immutable-hash-map-add)
(setf (symbol-function 'remove) #'immutable-hash-map-remove)
(setf (symbol-function 'union) #'immutable-hash-map-union)
(setf (symbol-function 'intersection) #'immutable-hash-map-intersection)
(setf (symbol-function 'difference) #'immutable-hash-map-difference)
(setf (symbol-function 'symmetric-difference) #'immutable-hash-map-symmetric-difference)
